name: Pack and release

on:
  workflow_call:
    inputs:
      prerelease:
        type: boolean

jobs:
  release:
    name: Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      id-token: write  # Required for Azure login
    outputs:
      package: ${{ steps.parse-package.outputs.result }}
    steps:
      - name: Check out repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: true

      - name: Set up .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0

      - name: Parse package
        id: parse-package
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          _REF: ${{ github.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env._REF;

            if (!ref.startsWith('refs/heads/')) {
              core.setFailed(`Unexpected ref: ${ref}`);
              return;
            }

            // Example: refs/heads/release/{packageName}/{version}
            //          0   /1    /2      /3            /4
            const refParts = ref.split('/');

            if (refParts.length < 4) {
              core.setFailed(`Not at least 4 parts split by forward slash: ${ref}`);
              return;
            }

            return refParts[3];

      - name: Pack
        run: dotnet pack -c Release -p:"IsPreRelease=$IS_PRERELEASE"
        working-directory: "./extensions/${{ steps.parse-package.outputs.result }}/src"
        env:
          IS_PRERELEASE: ${{ inputs.prerelease }}

      - name: Get current version
        id: current-version
        run: echo "VERSION=$(dotnet msbuild -p:"IsPreRelease=$IS_PRERELEASE" --getProperty:Version)" >> "$GITHUB_OUTPUT"
        working-directory: "./extensions/${{ steps.parse-package.outputs.result }}/src"
        env:
          IS_PRERELEASE: ${{ inputs.prerelease }}

      - name: Create GitHub Release
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          _PACKAGE: ${{ steps.parse-package.outputs.result }}
          _CURRENT_VERSION: ${{ steps.current-version.outputs.VERSION }}
          _EVENT_REF: ${{ github.event.ref }}
          _INPUT_PRERELEASE: ${{ inputs.prerelease }}
        with:
          script: |
            const package = process.env._PACKAGE;
            const currentVersion = process.env._CURRENT_VERSION;
            const eventRef = process.env._EVENT_REF;
            const preRelease = process.env._INPUT_PRERELEASE === "true";
            const currentRef = process.env.GITHUB_SHA;

            // Configure Git
            await exec.exec(`git config user.name "github-actions"`);
            await exec.exec(`git config user.email "github-actions@github.com"`);

            // List existing tags so that we could use them to link to the best full changelog
            // Debug purposes only right now until there is enough data for me to make this command bullet proof
            await exec.exec("git fetch --tags");
            await exec.exec(`git --no-pager tag --list "${package}_v*" --no-contains "${currentRef}"`, [], {
              listeners: {
                stdout: function stdout(data) {
                  console.log(`Found tags:\n${data}`);
                }
              },
              ignoreErrorCode: true // Just for research purposes right now, it's fine if this fails
            });

            // Create tag
            const tag = `${package}_v${currentVersion}`;

            console.log(`Creating tag & release: ${tag}`);

            await exec.exec(`git tag "${tag}"`);
            await exec.exec(`git push origin --tags`);

            // Create release
            const { data } = await github.rest.repos.createRelease({
              owner: "bitwarden",
              repo: "dotnet-extensions",
              tag_name: tag,
              target_commitish: eventRef,
              name: tag,
              body: "",
              prerelease: preRelease,
              generate_release_notes: false, // This creates a link between this and the last tag but that might not be our version
            });

            const templateMarker = data.upload_url.indexOf("{");

            let url = data.upload_url;

            if (templateMarker > -1) {
              url = url.substring(0, templateMarker);
            }

            const globber = await glob.create("**/*.nupkg");
            const files = await globber.glob();

            const fs = require("fs");
            const path = require("path");

            if (files.length === 0) {
              core.setFailed("No files found, cannot create release.");
              return;
            }

            for (const file of files) {
              const endpoint = new URL(url);
              endpoint.searchParams.append("name", path.basename(file));
              const endpointString = endpoint.toString();
              console.log(`Uploading file: ${file} to ${endpointString}`);
              // do the upload
              const uploadResponse = await github.request({
                method: "POST",
                url: endpointString,
                data: fs.readFileSync(file),
              });

              console.log(`Upload response: ${uploadResponse.status}`);
            }

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: packages
          path: "**/*.nupkg"

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-org-bitwarden
          secrets: "BW-GHAPP-ID,BW-GHAPP-KEY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Generate GH App token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: app-token
        with:
          app-id: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-ID }}
          private-key: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-KEY }}
          owner: bitwarden
          repositories: devops

      - name: Dispatch publishing
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          _REPOSITORY_NAME: ${{ github.event.repository.name }}
          _VERSION: ${{ steps.current-version.outputs.VERSION }}
        run: >
          gh workflow run publish-nuget.yml
          --repo bitwarden/devops
          --field repository="${_REPOSITORY_NAME}"
          --field run-id="${{ github.run_id }}"
          --field artifact="packages"
          --field environment="nuget"
          --field version="${_VERSION}"

  bump-version:
    name: Bump version
    needs:
      - release
    uses: bitwarden/dotnet-extensions/.github/workflows/version-bump.yml@main
    permissions:
      id-token: write
    with:
      package: ${{ needs.release.outputs.package }}
      type: ${{ inputs.prerelease && 'prerelease' || 'hotfix' }}
    secrets: inherit
